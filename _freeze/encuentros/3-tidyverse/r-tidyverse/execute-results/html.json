{
  "hash": "65200e9d59c026f878003e60644afcf6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Procesando datos con `{tidyverse}`\"\nsubtitle: \"Principales herramientas (funciones) para el tratamiento de datos\"\nauthor: \"[🔗 Estación R](https://estacion-r.netlify.app/)\"\ninstitution: Estación R\ndate: 2024-10-31\nfooter: \"[🔗 Introducción al Procesamiento de Datos con R](https://pablotis.github.io/intro-r-quarto/)\"\nlogo: \"../../img/Logo_PNG_Baja_Mesa de trabajo 1.png\"\nformat: \n  revealjs: \n    width: 1600\n    theme: ../estilo_diapos.scss\n    multiplex: true\n    transition: fade\n    progress: true\n    highlight-style: printing\n    embed-resources: true\n    code-line-numbers: false\n    code-block-bg: true\n    code-copy: true\ncode-block-border-left: \"#31BAE9\"\nexecute:\n  execute:\n  freeze: auto\n  echo: true\n---\n\n\n\n# Bienvenidos y bienvenidas a Estación R\n\n::::: columns\n::: {.column width=\"50%\"}\n💬 [Slack](https://join.slack.com/t/estacion-r/shared_invite/zt-2cktmesg3-11HhUxMFmynQe18ZsBkVpA)\n\n🔗 [Web](https://estacion-r.netlify.app/)\n\n🐘 [Mastodon](https://botsin.space/@r_tips)\n\n𝕏 [X](https://twitter.com/estacion_erre)\n\n✉️ [Correo](mailto:pablotisco@gmail.com)\n:::\n\n::: {.column width=\"50%\"}\n[Instagram](https://www.instagram.com/estacion_ere?igsh=OWhtcWR5ZGkwb3Bw&utm_source=qr)\n\n[LinkedIn](https://www.linkedin.com/company/estacion-r/)\n:::\n:::::\n\n------------------------------------------------------------------------\n\n## ¿Qué vimos?\n\n<br>\n\n✅ Conceptos básicos de R (valores, vectores, data.framtes, funciones, objetos)\n\n<br>\n\n✅ Cómo armar y organizar un proyecto de trabajo\n\n<br>\n\n✅ Qué son los paquetes (o librerías)\n\n## Hoja de Ruta\n\n::::: columns\n::: {.column width=\"50%\"}\n📌 ¿Qué es la Ciencia de Datos?\n\n<br>\n\n📦 Paquete `{dplyr}`\n\n```         \n🔧 `select()` 🔧 `filter()` \n\n🔧 `mutate()` 🔧 `rename()` \n\n🔧 `arrange()` \n\n🔧 `group_by()` 🔧 `summarise()`  \n\n🔧 `joins` \n```\n:::\n\n::: {.column width=\"50%\"}\n📌 La pipa (`|>` o `%>%`)\n\n<br>\n\n📦 Paquete `{tidyr}`\n\n```         \n🔧 `pivot_longer()` 🔧 `pivot_wider()`  \n```\n:::\n:::::\n\n## Configuración para esta clase\n\n<br>\n\n-   Armar un proyeto de trabajo nuevo\n\n-   Crear una carpeta en el llamada `datos`\n\n-   Descargar la base del [**Padrón Único Nacional de Alojamientos**](https://datos.yvera.gob.ar/dataset/padron-unico-nacional-alojamiento) (Argentina) y ubicarla en la carpeta `datos`\n\n-   Crear un **script** de trabajo\n\n# ¿Qué es la Ciencia de Datos?\n\n## ¿Qué es la Ciencia de Datos?\n\n![](../1-intro-r/images/proceso_ciencia_datos.jpg){fig-alt=\"r project console\"}\n\n# `{tidyverse}`\n\n## ¿Qué es `{tidyverse}`?\n\n::: incremental\n-   Una colección de paquetes.\n\n-   Comparten una filosofía acerca de los datos y la programación en R (\"*tidy*\" -*ordenado*-).\n\n-   Tienen una coherencia para ser utilizados en conjunto.\n\n-   Orientado a ser leído y escrito por y para seres humanos.\n\n-   Una comunidad, basada en los principios del código abierto y trabajo colaborativo.\n:::\n\n## ¿Qué es `{tidyverse}`?\n\n![](../1-intro-r/images/circuito_del_dato_tidy.png)\n\n## `{tidyverse}`\n\n<br>\n\n-   Instalación:\n\n``` r\ninstall.packages(\"tidyverse\")\n```\n\n## `{tidyverse}`\n\n<br>\n\n-   Cargo el paquete:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## `{tidyverse}`\n\n-   Nos evita tener que instalar uno por uno a cada paquete:\n\n``` r\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"ggplot2\")\n```\n\n<br>\n\n-   Como también tener que convocarlos de a uno:\n\n``` r\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n\n# La pipa\n\n## Un operador llamado `pipa`\n\n<br>\n\n<br>\n\n::::: columns\n::: {.column width=\"50%\"}\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_datos |> \n  funcion1 |> \n  funcion2 |>  \n  funcion3\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/pipa.gif)\n:::\n:::::\n\n## Un operador llamado `pipa`\n\n<br>\n\n-   Pipa de **R base**: `|>`\n\n<br>\n\n-   Pipa de **{magritr}**: `%>%`\n\n## Ejemplo:\n\n<br> <br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos <- data.frame(nombre = c(\"Pirulanzo\", \"Rodogovia\", \"Rodogovia\", \"Rodogovia\"),\n                    edad = c(23, 12, 87, 32))\n\ndatos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     nombre edad\n1 Pirulanzo   23\n2 Rodogovia   12\n3 Rodogovia   87\n4 Rodogovia   32\n```\n\n\n:::\n:::\n\n\n\n## Ejemplo:\n\n-   Quiero calcular qué proporción de personas se llaman *Rodogovia*\n\n<br>\n\n-   Antes (*sin el pipe*):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(prop.table(table(datos$nombre)), digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nPirulanzo Rodogovia \n      0.2       0.8 \n```\n\n\n:::\n:::\n\n\n\n## Ejemplo:\n\n<br>\n\n-   Después (*con el pipe*):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos$nombre |> \n  table() |> \n  prop.table() |> \n  round(digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nPirulanzo Rodogovia \n      0.2       0.8 \n```\n\n\n:::\n:::\n\n\n\n# \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/logo dplyr.png){fig-align='center' width=30%}\n:::\n:::\n\n\n\n## Funciones del paquete dplyr:\n\n<br>\n\n| **Función**   |                            **Acción** |\n|:--------------|--------------------------------------:|\n| `select()`    |     *selecciona o descarta variables* |\n| `filter()`    |                    *selecciona filas* |\n| `mutate()`    |              *crea / edita variables* |\n| `rename()`    |                  *renombra variables* |\n| `group_by()`  | *segmenta en funcion de una variable* |\n| `summarize()` |         *genera una tabla de resúmen* |\n\n# **select()**\n\n<html>\n\n<hr color='#EB811B' size=1px width=1600px>\n\n</html>\n\n<html>\n\n<p style=\"color:grey;\" align:\"left\">Elige o descarta columnas de una base de datos</p>\n\n</html>\n\n## `select()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_datos |> \n  select(id, nombre) #<<\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/select_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n\n## Caso práctico\n\n\n\n\n\n\n\n``` r\n# Cargo paquete\nlibrary(readr)\n\n# Importo datos\ndf_puna <- read_csv(\"datos/puna_base_agregada.csv\")\n```\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exploro la base\ncolnames(df_puna)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"indice_tiempo\"           \"region\"                 \n [3] \"ruta_natural\"            \"provincia_codigo\"       \n [5] \"provincia_nombre\"        \"departamento_partido\"   \n [7] \"localidad\"               \"clasificacion_minturdep\"\n [9] \"tipo\"                    \"establecimientos\"       \n[11] \"unidades\"                \"habitaciones\"           \n[13] \"plazas\"                 \n```\n\n\n:::\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   **Pedido:** La coordinadora me ha solicitado conocer la cantidad de plazas que hay por localidad y, si es posible, saber de qué tipo son los alojamientos\n\n<br>\n\n-   Variables de trabajo:\n\n    -   *localidad*\n    -   *plazas*\n    -   *tipo*\n\n## Caso práctico\n\n<br>\n\n-   Selecciono las 3 columnas de interés\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4\"}\nlibrary(tidyverse)\n\ndf_puna |> \n  select(localidad, tipo, plazas)\n```\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Selecciono las 3 columnas de interés\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nlibrary(tidyverse)\n\ndf_puna_sel <- df_puna |> \n  select(localidad, tipo, plazas)\n```\n:::\n\n\n\n<br>\n\n-   Chequeo las columnas del nuevo objeto\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ncolnames(df_puna_sel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"localidad\" \"tipo\"      \"plazas\"   \n```\n\n\n:::\n:::\n\n\n\n# Otras formas de seleccionar...\n\n## `select()` - *por posición*\n\n<br>\n\n1.  Chequeo la posición:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"indice_tiempo\"           \"region\"                 \n [3] \"ruta_natural\"            \"provincia_codigo\"       \n [5] \"provincia_nombre\"        \"departamento_partido\"   \n [7] \"localidad\"               \"clasificacion_minturdep\"\n [9] \"tipo\"                    \"establecimientos\"       \n[11] \"unidades\"                \"habitaciones\"           \n[13] \"plazas\"                 \n```\n\n\n:::\n:::\n\n\n\n## `select()` - *por posición*\n\n<br>\n\n2.  Selecciono\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion <- df_puna |> \n  select(7, 9, 13)\n```\n:::\n\n\n\n## `select()` - *por posición*\n\n<br>\n\n3.  Chequeo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"localidad\" \"tipo\"      \"plazas\"   \n```\n\n\n:::\n:::\n\n\n\n## `select()` - *por posición (columnas consecutivas)*\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion2 <- df_puna |> \n  select(1:3)\n```\n:::\n\n\n\n## `select()` - *por posición (columnas consecutivas)*\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion2 <- df_puna |> \n  select(1:3)\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"indice_tiempo\" \"region\"        \"ruta_natural\" \n```\n\n\n:::\n:::\n\n\n\n#  {.center auto-animate=\"true\"}\n\n![](https://imgs.search.brave.com/Frz7Kuv_uvyXQb269pQbZ2-UxWSZ-oIPOgfP4lTWmmU/rs:fit:860:0:0/g:ce/aHR0cHM6Ly9naWZk/Yi5jb20vaW1hZ2Vz/L2hpZ2gvc2FjaGEt/YmFyb24tY29oZW4t/dmVyeS1uaWNlLXFq/N2x5YXFudXBueTl6/ODAuZ2lm.gif)\n\n## `select()` - *por nombre (consecutiva)*\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion3 <- df_puna |> \n  select(establecimientos:plazas)\n```\n:::\n\n\n\n## `select()` - *por nombre (consecutiva)*\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion3 <- df_puna |> \n  select(establecimientos:plazas)\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"establecimientos\" \"unidades\"         \"habitaciones\"     \"plazas\"          \n```\n\n\n:::\n:::\n\n\n\n# \n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExeXk3OXA1YnRnOGFkOGxqMjd4ZHU4MzZha2I4dzhqMmw0NTFmN2RoZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/d4W4ZshZVbrqYvVnh8/giphy.gif)\n\n## `select()` - *Por patrones de texto*\n\n<br>\n\n**Trío:**\n\n-   `starts_with()` --\\> *empieza con...*\n\n-   `ends_with()` --\\> *termina con...*\n\n-   `contains()` --\\> *contiene...*\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron1 <- df_puna |> \n  select(starts_with(\"provincia\"))\n```\n:::\n\n\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron1 <- df_puna |> \n  select(starts_with(\"provincia\"))\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"provincia_codigo\" \"provincia_nombre\"\n```\n\n\n:::\n:::\n\n\n\n## `select()` + `ends_with()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron2 <- df_puna |> \n  select(ends_with(\"o\"))\n```\n:::\n\n\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron2 <- df_puna |> \n  select(ends_with(\"o\"))\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"indice_tiempo\"        \"provincia_codigo\"     \"departamento_partido\"\n[4] \"tipo\"                \n```\n\n\n:::\n:::\n\n\n\n# \n\n![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbjEzMW15cWk3bXJ5MzQ0aXQwd2IwenIyN3JseTlucW9nc2R0enY4NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Lk023zZqHJ3Zz4rxtV/giphy.gif)\n\n## `select()` + `contains()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron3 <- df_puna |> \n  select(contains(\"_\"))\n```\n:::\n\n\n\n## `select()` + `contains()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron3 <- df_puna |> \n  select(contains(\"_\"))\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"indice_tiempo\"           \"ruta_natural\"           \n[3] \"provincia_codigo\"        \"provincia_nombre\"       \n[5] \"departamento_partido\"    \"clasificacion_minturdep\"\n```\n\n\n:::\n:::\n\n\n\n# \n\n![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExYXprbDVsM2l1MmF5dDRjMGY1N2xiNW52dmFscHNsM3NhbDZ5eXc5NSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/NEvPzZ8bd1V4Y/giphy.gif)\n\n# LA COMBINACIÓN FINAL\n\n## `select()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_select_tuto <- df_puna |> \n  select(localidad, 2, starts_with(\"provincia\"), 9:11)\n```\n:::\n\n\n\n## `select()`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ndf_puna_select_tuto <- df_puna |> \n  select(localidad, 2, starts_with(\"provincia\"), 9:11)\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_select_tuto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"localidad\"        \"region\"           \"provincia_codigo\" \"provincia_nombre\"\n[5] \"tipo\"             \"establecimientos\" \"unidades\"        \n```\n\n\n:::\n:::\n\n\n\n# \n\n![](images/explode.gif)\n\n# Ejercitación grupal\n\n## Ejercitación\n\n-   Crear un objeto en donde importamos la base de datos de Alojamientos.\n\n-   Seleccionar 3 variables de la base según el nombre de las mismas y guardar en otro objeto.\n\n-   Seleccionar 3 variables de la base según la posición de las mismas y guardar en otro objeto.\n\n-   Seleccionar todas las variables que **empiecen** con un patrón de texto (a elegir).\n\n# **filter()**\n\n<html>\n\n<hr color='#EB811B' size=1px width=1600px>\n\n</html>\n\n<html>\n\n<p style=\"color:grey;\" align:\"left\">Define los casos (filas) en base a una condición</p>\n\n</html>\n\n## `filter()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbase_de_datos |> \n  filter(condicion) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/filter_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n\n## `filter()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbase_de_datos |> \n  filter(Edad > 65) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/filter_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   La directora de tesis me pidió que estudie los alojamientos de tipo **Camping**.\n\n<br>\n\n-   Universo de análisis / Población de estudio:\n\n    -   Alojamientos tipo *Camping*\n\n## Caso práctico\n\n<br>\n\n-   Chequeo con qué tipos de alojamiento cuento en la base:\n\n## Caso práctico\n\n<br>\n\n-   Chequeo con qué tipos de alojamiento cuento en la base:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_puna$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Albergue municipal / complejo deportivo\"\n [2] \"Caba\\xf1as / bungalows\"                 \n [3] \"Conjunto de unidades turisticas\"        \n [4] \"Establecimiento rural\"                  \n [5] \"Hosteria\"                               \n [6] \"Hotel 1 estrella\"                       \n [7] \"Hotel 2 estrellas\"                      \n [8] \"Hotel boutique\"                         \n [9] \"Hotel sin categorizar\"                  \n[10] \"Residencial\"                            \n[11] \"Camping\"                                \n[12] \"Hotel 3 estrellas\"                      \n[13] \"Sin clasificar\"                         \n[14] \"Motel\"                                  \n[15] \"Hospedaje\"                              \n[16] \"Posada\"                                 \n[17] \"Apart hotel\"                            \n[18] \"Albergue / b&b / hostel\"                \n[19] \"Hotel 4 estrellas\"                      \n[20] \"Hotel 5 estrellas\"                      \n[21] \"Dormis\"                                 \n[22] \"Residencia universitaria\"               \n[23] \"Hotel sindical / mutual\"                \n[24] \"Complejo turistico\"                     \n[25] \"Refugio\"                                \n[26] \"Pension\"                                \n[27] \"Lodge de pesca / caza/ en bodegas\"      \n```\n\n\n:::\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Aplico filtro\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf_filtrada <- df_puna |> \n  filter(clasificacion_minturdep == \"Camping\")\n```\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Chequeo filtro\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_filtrada$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Camping\"\n```\n\n\n:::\n:::\n\n\n\n## `filter()`\n\n::::: columns\n::: {.column width=\"50%\" style=\"font-size: 0.68\"}\n| Condición | Acción              |\n|:----------|:--------------------|\n| `==`      | *igual*             |\n| `%in%`    | *incluye*           |\n| `!=`      | *distinto*          |\n| `>`       | *mayor que*         |\n| `<`       | *menor que*         |\n| `>=`      | *mayor o igual que* |\n| `<=`      | *menor o igual que* |\n:::\n\n::: {.column width=\"50%\" style=\"font-size: 0.68\"}\n| Operador | Descripción                                 |\n|:---------|:--------------------------------------------|\n| `&`      | *y* - Cuando se cumplen ambas condiciones   |\n| \\|       | *o* - Cuando se cumple una u otra condición |\n:::\n:::::\n\n## Caso práctico\n\n<br>\n\n-   La encargada de la oficina de turismo de Buenos Aires quiere que le arme una base sólo con alojamientos de tipo *Camping* y *Hoteles 3 estrellas*.\n\n## Caso práctico\n\n<br>\n\n-   Chequeo las categorías de la variable `clasificacion_minturdep`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_puna$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Albergue municipal / complejo deportivo\"\n [2] \"Caba\\xf1as / bungalows\"                 \n [3] \"Conjunto de unidades turisticas\"        \n [4] \"Establecimiento rural\"                  \n [5] \"Hosteria\"                               \n [6] \"Hotel 1 estrella\"                       \n [7] \"Hotel 2 estrellas\"                      \n [8] \"Hotel boutique\"                         \n [9] \"Hotel sin categorizar\"                  \n[10] \"Residencial\"                            \n[11] \"Camping\"                                \n[12] \"Hotel 3 estrellas\"                      \n[13] \"Sin clasificar\"                         \n[14] \"Motel\"                                  \n[15] \"Hospedaje\"                              \n[16] \"Posada\"                                 \n[17] \"Apart hotel\"                            \n[18] \"Albergue / b&b / hostel\"                \n[19] \"Hotel 4 estrellas\"                      \n[20] \"Hotel 5 estrellas\"                      \n[21] \"Dormis\"                                 \n[22] \"Residencia universitaria\"               \n[23] \"Hotel sindical / mutual\"                \n[24] \"Complejo turistico\"                     \n[25] \"Refugio\"                                \n[26] \"Pension\"                                \n[27] \"Lodge de pesca / caza/ en bodegas\"      \n```\n\n\n:::\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Filtro (opción 1):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_camping_y_hoteles3estrellas <- df_puna |> \n  filter(clasificacion_minturdep == \"Camping\" | clasificacion_minturdep == \"Hotel 3 estrellas\")\n```\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Chequeo filtro\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_camping_y_hoteles3estrellas$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Camping\"           \"Hotel 3 estrellas\"\n```\n\n\n:::\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Filtro (opción 2, operador: `%in%`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_camping_y_hoteles3estrellas <- df_puna |> \n  filter(clasificacion_minturdep %in% c(\"Camping\", \"Hotel 3 estrellas\"))\n```\n:::\n\n\n\n## Caso práctico\n\n<br>\n\n-   Chequeo filtro\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_camping_y_hoteles3estrellas$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Camping\"           \"Hotel 3 estrellas\"\n```\n\n\n:::\n:::\n\n\n\n## `select()` + `filter()`\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3\"}\ndf_puna |> \n  select(localidad, \n         clasificacion_minturdep)\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 2\n   localidad clasificacion_minturdep                  \n   <chr>     <chr>                                    \n 1 Baradero  \"Albergue municipal / complejo deportivo\"\n 2 Baradero  \"Caba\\xf1as / bungalows\"                 \n 3 Baradero  \"Conjunto de unidades turisticas\"        \n 4 Baradero  \"Establecimiento rural\"                  \n 5 Baradero  \"Hosteria\"                               \n 6 Baradero  \"Hotel 1 estrella\"                       \n 7 Baradero  \"Hotel 2 estrellas\"                      \n 8 Baradero  \"Hotel boutique\"                         \n 9 Baradero  \"Hotel sin categorizar\"                  \n10 Baradero  \"Residencial\"                            \n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `select()` + `filter()`\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndf_puna |> \n  select(localidad, \n         clasificacion_minturdep) |> \n  filter(clasificacion_minturdep %in% c(\"Camping\", \"Hotel 3 estrellas\"))\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,438 × 2\n   localidad                  clasificacion_minturdep\n   <chr>                      <chr>                  \n 1 Belen de Escobar           Camping                \n 2 Belen de Escobar           Hotel 3 estrellas      \n 3 Fatima                     Hotel 3 estrellas      \n 4 Ramallo                    Hotel 3 estrellas      \n 5 Villa Ramallo              Hotel 3 estrellas      \n 6 San Nicolas de Los Arroyos Hotel 3 estrellas      \n 7 San Pedro                  Camping                \n 8 San Pedro                  Hotel 3 estrellas      \n 9 Zarate                     Hotel 3 estrellas      \n10 9 de Julio                 Hotel 3 estrellas      \n# ℹ 1,428 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n# Ejercitación grupal\n\n## Ejercitación\n\n-   Crear un objeto que contenga la base de PUNA sólo con las variables `localidad`, `ruta_natural` y `plazas`\n\n-   En ese mismo objeto, quedarse sólo con las filas de la **ruta natural** `Delta`.\n\n-   Calcular cuántas plazas hay en total para la ruta natural `Delta` (*tip: la función `sum()` puede ser de ayuda*)\n\n# **mutate()**\n\n<html>\n\n::: {style=\"float:left\"}\n:::\n\n<hr color='#EB811B' size=1px width=1600px>\n\n</html>\n\n<html>\n\n<p style=\"color:grey;\" align:\"left\">Crea / edita variables (columnas)</p>\n\n</html>\n\n## `mutate()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbase_de_datos %>% \n   mutate(var_nueva = var_1 + var_2)\n```\n:::\n\n\n\n## `mutate()` - Caso práctico\n\n<br>\n\n-   Llega a la oficina una persona interesada en saber cuál es el valor total disponible para dormir en los establecimientos. Quiere, entonces, conocer el resultado de la suma entre `habitaciones` y `plazas`.\n\n. . .\n\n-   Para ello, podemos crear una variable que contenga este resultado:\n\n## `mutate()` - Caso práctico\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_lugar_tot <- df_puna |> \n  select(localidad, habitaciones, plazas)\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 3\n   localidad habitaciones plazas\n   <chr>            <dbl>  <dbl>\n 1 Baradero             6     30\n 2 Baradero             0    277\n 3 Baradero             0     50\n 4 Baradero            57    131\n 5 Baradero            68    164\n 6 Baradero            15     34\n 7 Baradero            49    135\n 8 Baradero            27     78\n 9 Baradero            28     60\n10 Baradero             5     15\n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `mutate()` - Caso práctico\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\ndf_lugar_tot <- df_puna |> \n  select(localidad, habitaciones, plazas) |> \n  mutate(lugar_disponible = habitaciones + plazas)\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 4\n   localidad habitaciones plazas lugar_disponible\n   <chr>            <dbl>  <dbl>            <dbl>\n 1 Baradero             6     30               36\n 2 Baradero             0    277              277\n 3 Baradero             0     50               50\n 4 Baradero            57    131              188\n 5 Baradero            68    164              232\n 6 Baradero            15     34               49\n 7 Baradero            49    135              184\n 8 Baradero            27     78              105\n 9 Baradero            28     60               88\n10 Baradero             5     15               20\n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br> <br>\n\n-   Necesito agregarle una etiqueta a la variable `indice_tiempo` (pasar de `2020` a `\"Año 2020\"`)\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_lugar_tot <- df_puna |> \n  select(indice_tiempo, localidad, plazas)\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 3\n   indice_tiempo localidad plazas\n           <dbl> <chr>      <dbl>\n 1          2020 Baradero      30\n 2          2020 Baradero     277\n 3          2020 Baradero      50\n 4          2020 Baradero     131\n 5          2020 Baradero     164\n 6          2020 Baradero      34\n 7          2020 Baradero     135\n 8          2020 Baradero      78\n 9          2020 Baradero      60\n10          2020 Baradero      15\n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4,5\"}\ndf_puna_recod <- df_puna |> \n  select(indice_tiempo, localidad, plazas) |> \n  mutate(anio_etiqueta = case_when(indice_tiempo == 2020 ~ \"Año 2020\",\n                                      indice_tiempo == 2021 ~ \"Año 2021\",\n                                      indice_tiempo == 2022 ~ \"Año 2022\"))\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 4\n   indice_tiempo localidad plazas anio_etiqueta\n           <dbl> <chr>      <dbl> <chr>        \n 1          2020 Baradero      30 Año 2020     \n 2          2020 Baradero     277 Año 2020     \n 3          2020 Baradero      50 Año 2020     \n 4          2020 Baradero     131 Año 2020     \n 5          2020 Baradero     164 Año 2020     \n 6          2020 Baradero      34 Año 2020     \n 7          2020 Baradero     135 Año 2020     \n 8          2020 Baradero      78 Año 2020     \n 9          2020 Baradero      60 Año 2020     \n10          2020 Baradero      15 Año 2020     \n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br> <br>\n\n-   Necesito caracterizar al sector hotelero y compararlo con el resto de los alojamientos\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4\"}\ndf_puna_agrup <- df_puna |> \n  select(tipo, plazas) |> \n  mutate(tipo_agrupado = case_when(tipo == \"Hoteleros\" ~ \"Hoteleros\",\n                                   .default = \"Otros\"))\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 3\n   tipo             plazas tipo_agrupado\n   <chr>             <dbl> <chr>        \n 1 Otros colectivos     30 Otros        \n 2 Parahoteleros       277 Otros        \n 3 Otros colectivos     50 Otros        \n 4 Parahoteleros       131 Otros        \n 5 Parahoteleros       164 Otros        \n 6 Hoteleros            34 Hoteleros    \n 7 Hoteleros           135 Hoteleros    \n 8 Hoteleros            78 Hoteleros    \n 9 Hoteleros            60 Hoteleros    \n10 Parahoteleros        15 Otros        \n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br> <br>\n\n-   Necesito Reagrupar unicamente a los hoteles de 1, 2 y 3 estrellas, para compararlos frente al resto:\n\n## `mutate()` + `case_when()` = Recodificación\n\n<br>\n\n::::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4,5,6\"}\ndf_puna_agrup_hotel <- df_puna |> \n  select(clasificacion_minturdep, plazas) |> \n  mutate(clasif_agrupado = case_when(\n    clasificacion_minturdep %in% c(\"Hotel 1 estrella\", \n                                   \"Hotel 2 estrellas\",\n                                   \"Hotel 3 estrellas\") ~ \"Hotel hasta 3 estrellas\",\n    .default = \"Otros\"))\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 3\n   clasificacion_minturdep                   plazas clasif_agrupado        \n   <chr>                                      <dbl> <chr>                  \n 1 \"Albergue municipal / complejo deportivo\"     30 Otros                  \n 2 \"Caba\\xf1as / bungalows\"                     277 Otros                  \n 3 \"Conjunto de unidades turisticas\"             50 Otros                  \n 4 \"Establecimiento rural\"                      131 Otros                  \n 5 \"Hosteria\"                                   164 Otros                  \n 6 \"Hotel 1 estrella\"                            34 Hotel hasta 3 estrellas\n 7 \"Hotel 2 estrellas\"                          135 Hotel hasta 3 estrellas\n 8 \"Hotel boutique\"                              78 Otros                  \n 9 \"Hotel sin categorizar\"                       60 Otros                  \n10 \"Residencial\"                                 15 Otros                  \n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n# Ejercitación grupal\n\n## Ejercitación\n\n-   Necesito reagrupar la variable `clasificacion_minturdep` para quedarme con 2 categorìas:\n\n    -   `Camping`\n\n    -   `Otros`\n\nDada la consigna anterior, rellenar en el campo marcado con `______` con el código necesario para ejecutar la sentencia:\n\n``` r\ndf_puna |> \n  select(localidad, ________) |> \n  mutate(nueva_clasificacion = case_when(________ == \"Camping\" ~ \"Camping\",\n                                         .default = \"Otros\"))\n```\n\n# **summarise()**\n\n<html>\n\n<hr color='#EB811B' size=1px width=1600px>\n\n</html>\n\n<html>\n\n<p style=\"color:grey;\" align:\"left\">Resume información y realiza cálculos</p>\n\n</html>\n\n## `summarise()`\n\n<br>\n\n-   Antes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(df_puna$plazas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2346290\n```\n\n\n:::\n:::\n\n\n\n## `summarise()`\n\n<br>\n\n-   Ahora:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna |> \n  summarise(cant_plazas = sum(plazas))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  cant_plazas\n        <dbl>\n1     2346290\n```\n\n\n:::\n:::\n\n\n\n## `summarise()`\n\n<br>\n\n-   Ahora:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3\"}\ndf_puna |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  cant_plazas prom_plazas\n        <dbl>       <dbl>\n1     2346290        159.\n```\n\n\n:::\n:::\n\n\n\n## `summarise()`\n\n<br>\n\n-   Ahora:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2:5\"}\ndf_puna |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas),\n            min_plazas  = min(plazas),\n            max_plazas  = max(plazas))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  cant_plazas prom_plazas min_plazas max_plazas\n        <dbl>       <dbl>      <dbl>      <dbl>\n1     2346290        159.          0      20001\n```\n\n\n:::\n:::\n\n\n\n# **group_by()**\n\n<html>\n\n<hr color='#EB811B' size=1px width=1600px>\n\n</html>\n\n<html>\n\n<p style=\"color:grey;\" align:\"left\">Ayuda a ejecutar una función de forma agrupada</p>\n\n</html>\n\n## `group_by()`\n\n<br>\n\n-   Antes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2:5\"}\ndf_puna |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas),\n            min_plazas  = min(plazas),\n            max_plazas  = max(plazas))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  cant_plazas prom_plazas min_plazas max_plazas\n        <dbl>       <dbl>      <dbl>      <dbl>\n1     2346290        159.          0      20001\n```\n\n\n:::\n:::\n\n\n\n## `group_by()`\n\n<br>\n\n-   Después:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna |>\n  group_by(indice_tiempo) |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas),\n            min_plazas  = min(plazas),\n            max_plazas  = max(plazas))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  indice_tiempo cant_plazas prom_plazas min_plazas max_plazas\n          <dbl>       <dbl>       <dbl>      <dbl>      <dbl>\n1          2020      785963        161.          0      20001\n2          2021      780050        159.          0      20001\n3          2022      780277        158.          0      19964\n```\n\n\n:::\n:::\n\n\n\n## input / output\n\n<br>\n\n::::: columns\n::: {.column width=\"50%\"}\n![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExOHJ6NDl6MGtpbnE4bng3dGM5aDFtdDlpMXBpcDN3ZHlheWh5OWY3biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/adNxtO8PpNOPS/giphy.gif)\n:::\n\n::: {.column width=\"50%\"}\n-   Toda función tiene un `input` (ingredientes 🧂🌾🧄) y un `output` (la torta 🎂)\n:::\n:::::\n\n## input / output\n\n<br>\n\n-   ¿Cuál es el output del `summarise()`?\n\n## input / output\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creo objeto\ntabla_puna <- df_puna |>\n  group_by(indice_tiempo) |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas),\n            min_plazas  = min(plazas),\n            max_plazas  = max(plazas))\n\n# Chequeo tipo de objeto\nclass(tabla_puna)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n## input / output\n\n<br>\n\n-   ¿Y qué puedo hacer sobre un data frame?\n\n## input / output\n\n<br>\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ntabla_puna |> \n  filter(indice_tiempo == 2022)\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  indice_tiempo cant_plazas prom_plazas min_plazas max_plazas\n          <dbl>       <dbl>       <dbl>      <dbl>      <dbl>\n1          2022      780277        158.          0      19964\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## input / output\n\n<br>\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\ntabla_puna |> \n  filter(indice_tiempo == 2022) |> \n  select(indice_tiempo, cant_plazas)\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  indice_tiempo cant_plazas\n          <dbl>       <dbl>\n1          2022      780277\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `tidyverse` en acción\n\n<br>\n\n![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExazY5ZnJvaWsxYnp4bDZ2amtjOGhpc2ZxaGNobDVpOGlwa3VwcHhlZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/sG4zmff2zDOp7t2MNA/giphy.gif)\n\n## `tidyverse` en acción\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna |> \n  select(indice_tiempo, tipo, plazas)\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14,717 × 3\n   indice_tiempo tipo             plazas\n           <dbl> <chr>             <dbl>\n 1          2020 Otros colectivos     30\n 2          2020 Parahoteleros       277\n 3          2020 Otros colectivos     50\n 4          2020 Parahoteleros       131\n 5          2020 Parahoteleros       164\n 6          2020 Hoteleros            34\n 7          2020 Hoteleros           135\n 8          2020 Hoteleros            78\n 9          2020 Hoteleros            60\n10          2020 Parahoteleros        15\n# ℹ 14,707 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `tidyverse` en acción\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\ndf_puna |> \n  select(indice_tiempo, tipo, plazas) |> \n  filter(indice_tiempo %in% c(2021, 2022))\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,843 × 3\n   indice_tiempo tipo             plazas\n           <dbl> <chr>             <dbl>\n 1          2021 Otros colectivos     30\n 2          2021 Parahoteleros       277\n 3          2021 Otros colectivos     50\n 4          2021 Parahoteleros       131\n 5          2021 Parahoteleros       164\n 6          2021 Hoteleros            34\n 7          2021 Hoteleros           135\n 8          2021 Hoteleros            78\n 9          2021 Hoteleros            60\n10          2021 Parahoteleros        15\n# ℹ 9,833 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `tidyverse` en acción\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndf_puna |> \n  select(indice_tiempo, tipo, plazas) |> \n  filter(indice_tiempo %in% c(2021, 2022)) |> \n  mutate(tipo_recod = case_when(tipo == \"Hoteleros\" ~ \"Hoteleros\",\n                                .default = \"Otros\"))\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,843 × 4\n   indice_tiempo tipo             plazas tipo_recod\n           <dbl> <chr>             <dbl> <chr>     \n 1          2021 Otros colectivos     30 Otros     \n 2          2021 Parahoteleros       277 Otros     \n 3          2021 Otros colectivos     50 Otros     \n 4          2021 Parahoteleros       131 Otros     \n 5          2021 Parahoteleros       164 Otros     \n 6          2021 Hoteleros            34 Hoteleros \n 7          2021 Hoteleros           135 Hoteleros \n 8          2021 Hoteleros            78 Hoteleros \n 9          2021 Hoteleros            60 Hoteleros \n10          2021 Parahoteleros        15 Otros     \n# ℹ 9,833 more rows\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `tidyverse` en acción\n\n::::: columns\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6,7,8\"}\ndf_puna |> \n  select(indice_tiempo, tipo, plazas) |> \n  filter(indice_tiempo %in% c(2021, 2022)) |> \n  mutate(tipo_recod = case_when(tipo == \"Hoteleros\" ~ \"Hoteleros\",\n                                .default = \"Otros\")) |> \n  group_by(indice_tiempo, tipo_recod) |> \n  summarise(cant_plazas = sum(plazas),\n            prom_plazas = mean(plazas))\n```\n:::\n\n\n:::\n\n::: {.column widt=\"\\\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n# Groups:   indice_tiempo [2]\n  indice_tiempo tipo_recod cant_plazas prom_plazas\n          <dbl> <chr>            <dbl>       <dbl>\n1          2021 Hoteleros       454631        264.\n2          2021 Otros           325419        102.\n3          2022 Hoteleros       455702        264.\n4          2022 Otros           324575        101.\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## `tidyverse` en acción\n\n![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNXBmYmR4Nno1eDNrNjYwbnA1OG83cXRteXVibDNqd3h2aDdsbjRobCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/hXDrTueJWAscK3xWQ2/giphy.gif)\n",
    "supporting": [
      "r-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}